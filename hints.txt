The pseudo code below may help on Task 1. My intent that this may help.
sha256_hash(input_string):
FUNCTION sha256_hash(input_string):
    Convert input_string to bytes
    Calculate SHA256 hash of the bytes
    Return the hash as a hexadecimal string
END FUNCTION

You may use a different way to truncate a hash...in this way I am bit shifting but you may find another way.
truncate_hash(hash_string, bits):
FUNCTION truncate_hash(hash_string, bits):
    Take the first (bits / 4) characters of hash_string
    Convert this substring to an integer (base 16)
    Create a bitmask of 'bits' number of 1s
    Perform bitwise AND between the integer and the bitmask
    Return the result
END FUNCTION

You may use a different approach rather than hamming
hamming_distance(s1, s2):
FUNCTION hamming_distance(s1, s2):
    Initialize count to 0
    FOR each pair of characters (c1, c2) in (s1, s2):
        IF c1 != c2:
            Increment count
    RETURN count
END FUNCTION

You may use a different approach rather than hamming
find_hamming_distance_1():
FUNCTION find_hamming_distance_1():
    Generate a random string 'base' of 10 ASCII letters
    FOR each index i in base:
        Create 'modified' by flipping the i-th bit of base
        IF hamming_distance(base, modified) == 1:
            RETURN base, modified
    RETURN None, None
END FUNCTION

find_collision(bits, max_attempts):
FUNCTION find_collision(bits, max_attempts):
    Initialize empty dictionary 'seen'
    Record start time
    FOR attempts from 1 to max_attempts:
        Generate random string 's' of 10 ASCII letters
        Calculate truncated hash 'h' of 's'
        IF h exists in seen:
            Calculate end time
            RETURN seen[h], s, attempts, elapsed time
        ELSE:
            Add s to seen with key h
    RETURN None, None, max_attempts, elapsed time
END FUNCTION

task_1a():
FUNCTION task_1a():
    Print "Task 1a: SHA256 hashes of arbitrary inputs"
    FOR each input in ["Hello, World!", "Python", "Cryptography"]:
        Calculate SHA256 hash of input
        Print input and its hash
END FUNCTION

task_1b():
FUNCTION task_1b():
    Print "Task 1b: Strings with Hamming distance of 1"
    FOR i from 1 to 3:
        Find two strings s1, s2 with Hamming distance 1
        Calculate SHA256 hashes h1, h2 of s1, s2
        Print s1, s2, h1, h2
END FUNCTION

task_1c():
FUNCTION task_1c():
    Print "Task 1c: Finding collisions for truncated hashes"
    Initialize empty lists for bits, time, and inputs
    FOR bits from 8 to 50, step 2:
        Find collision for 'bits' number of bits
        IF collision found:
            Add result to table
            Append bits, time, and inputs to respective lists
        ELSE:
            Print timeout message
    Print results table
    Plot graphs:
        1. Digest Size vs Collision Time
        2. Digest Size vs Number of Inputs
    Save graphs as 'collision_analysis.png'
END FUNCTION

task_1_main():
FUNCTION task_1_main():
    Call task_1a()
    Call task_1b()
    Call task_1c()
END FUNCTION