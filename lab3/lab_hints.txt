Public Key Cryptography Implementation
Task 1 part 1 Hint
Implement Diffie-Hellman Key Exchange
here are some def's that you will need
generate_private_key
compute_public_key
compute_shared_secret
derive_key
encrypt_message
decrypt_message
diffie_hellman_protocol

Task 1 part 2 Hint
use some ‚Äúreal life‚Äù numbers. IETF suggestion
generate_private_key
compute_public_key # The pow() function allows you to calculate the power of a number and perform modular exponentiation.
compute_shared_secret
derive_key
encrypt_message
decrypt_message
diffie_hellman_protocol


Task 2: Part 1 Implement MITM key fixing
generate_private_key
compute_public_key # The pow() function allows you to calculate the power of a number and perform modular exponentiation.
compute_shared_secret
derive_key
encrypt_message
decrypt_message
mitm_key_fixing_attack

Task 2: Part 2
Show that Mallory can recover the messages ùëö0 and ùëö1 from their ciphertexts by setting alpha to 1, q, or q-1.
enerate_private_key
compute_public_key # The pow() function allows you to calculate the power of a number and perform modular exponentiation.
compute_shared_secret
derive_key
encrypt_message
decrypt_message
mitm_generator_attack


Task 3: Implement ‚Äútextbook‚Äù RSA & MITM Key Fixing via Malleability
Malleability in cryptography refers to the ability to modify encrypted data in a meaningful way without decrypting it first.
Key fixing in cryptography means forcing or manipulating the outcome of a key negotiation process.
here are some def's
generate_prime
mod_inverse
generate_keypair
encrypt
decrypt
string_to_int
int_to_string
test_rsa

# Requirement: Support variable length primes (up to 2048 bits)
def generate_prime(bits):
    """Generate a prime number with the specified number of bits."""
    return getPrime(bits)
# Requirement: Implement computing the multiplicative inverse yourself
#  mod_inverse calculates the modular multiplicative inverse and uses egcd  to find a number that, when multiplied by 'a', equals 1 in modular arithmetic with modulus 'm'.
#  egcd implements the Extended Euclidean Algorithm to find GCD and coefficients for solving linear Diophantine equations
# In RSA key generation:
# e is the public exponent (typically 65537)
# phi is Euler's totient of n calculated as  (p-1_ * (q-1))
# d is (the private key) is the modular multiplicative inverse of e modulo phi
# The mod_inverse function finds this d value, which is essential for decrypting messages in the RSA  #algorithm. It ensures that (e * d) % phi = 1, allowing the private key to undo the encryption performed by the # public key.
def mod_inverse(a, m):
    """Compute the modular multiplicative inverse of a modulo m."""
    def egcd(a, b):
        if a == 0:
            return b, 0, 1
        else:
            g, y, x = egcd(b % a, a)
            return g, x - (b // a) * y, y
    g, x, _ = egcd(a, m)
    if g != 1:
        raise Exception('Modular inverse does not exist')
    else:
        return x % m
# Requirement: Implement key generation
def generate_keypair(bits):
    """Generate RSA public and private keys."""
    p = generate_prime(bits // 2)
    q = generate_prime(bits // 2)
    n = p * q
    phi = (p - 1) * (q - 1)
    e = 65537  # Requirement: Use the value e=65537
    d = mod_inverse(e, phi)
    d_check = pow(e, -1, phi)
    #print(f"\nmod_inverse_check (d): {d}")
    #print(f"pow (d_check): {d_check}\n")
    return ((n, e), (n, d)) (edited) (edited) 

Hi All, one more hint for Task 3 Part 2 related to Showing how Mallory can create a valid signature for a third message, ùëö3=ùëö1‚àôùëö2.  Here is an explanation and code snippet. Hope this hint helps.
Note that Alice is sending m1 and m2 so she is signing these messages.
For Mallory, she wants Bob to believe that m3 is originating from Alice instead of Mallory. The fact that Mallory doesn't need to know what is in m1 and m2 from Alice but can successfully sign m3 is the key to Mallory's attack.
print(f"\nMallory's new message (m3 = m1 * m2 mod n): {m3}")
print(f"Mallory's forged signature for m3: {s3}")
# Requirement: Implement RSA signature verification function
def verify(public_key, message, signature):
    """Verify an RSA signature."""
    n, e = public_key
    return pow(signature, e, n) == message
# Step 6: Verify Mallory's forged signature
    print(f"\nVerifying Mallory's forged signature:")
    is_valid = verify(public_key, m3, s3)
    print(f"Signature 3 is valid: {is_valid}")